{
  "welcome": "Welcome to use peg, a third-party open source DogeCloud OSS CLI.",
  "langMaintainer": "LemonPrefect",
  "commands": {
    "config": {
      "description": "Init or edit config file",
      "add": { 
        "description": "Used to add a new bucket configuration",
        "examples": {
          "addBucket": "Add bucket"
        },
        "options": {
          "alias": "Bucket alias"
        },
        "errors": {
          "notInEndpoint": "Bucket `{{alias}}' failed to add as it isn't exist in such endpoint."
        },
        "logs": {
          "added": "Bucket `{{alias}}' is now in the config file."
        }
      },
      "delete": {
        "description": "Used to delete an existing bucket",
        "examples": {
          "deleteBucket": "Delete bucket"
        },
        "options": {
          "alias": "Bucket alias"
        },
        "logs": {
          "deleted": "Bucket `{{alias}}' deleted, showed as follow."
        }
      },
      "init": {
        "description": "Used to interactively generate the configuration file",
        "examples": {
          "init": "Init a config file in ./1.yaml"
        },
        "logs": {
          "configPathSet": "Specify the path of the configuration file: (now:{{configPath}})",
          "accessIdSet": "Input Your Secret ID:",
          "accessKeySet": "Input Your Secret Key:",
          "bucketAliasSet": "Input Bucket's Alias:"
        }
      },
      "set": {
        "description": "Used to modify configuration items in the [base] group of the configuration file",
        "examples": {
          "credentialSet": "Set credentials"
        },
        "logs": {
          "credentialSet": "Credential set."
        }
      },
      "show": {
        "description": "Prints information from a specified configuration file",
        "examples": {
          "showAllInfo": "Show all info"
        }
      }
    },
    "cp": {
      "description": "Upload, download or copy objects",
      "examples": {
        "upload": "Upload",
        "download": "Download",
        "copy": "Copy"
      },
      "options": {
        "meta": "Set the meta information of the file",
        "partSize": "(Upload only) Specifies the block size(MB)",
        "recursive": "Process objects recursively",
        "signURL": "(Download/Sync only) Generate OSS signed URL",
        "sync": "Examine CRC64 first",
        "threadNum": "(Upload only) Specifies the number of concurrent upload threads"
      },
      "errors": {
        "noFileToDownload": "No file matched to be downloaded.",
        "fileOccupied": "File `{{fullpath}}' occupied.",
        "metaInvalid": "Meta `{{meta}}' is invalid.",
        "pathInvalid": "`{{fullpath}}' rather be a directory or a file to be upload.",
        "urlShouldBeFile": "location should be a file.",
        "urlShouldBeDir": "location should be a directory."
      },
      "logs": {
        "syncHashing": "Sync Hashing..."
      }
    },
    "hash": {
      "description": "Calculate local file's hash-code or show cos file's hash-code",
      "examples": {
        "hashFile": "hash for `example.file' in test/ of bucket `example'"
      },
      "options": {
        "signURL": "Generate hash with OSS signed URL, charged."
      },
      "errors": {
        "noFileFound": "No file in `{{location}}' found!"
      },
      "logs": {
        "noHash": "[NO HASH]"
      }
    },
    "ls": {
      "description": "List buckets or objects",
      "examples": {
        "recursive": "List file recursively"
      },
      "options": {
        "limit": "Limit the number of objects listed(0~1000)",
        "recurse": "List objects recursively"
      }
    },
    "mb": {
      "description": "Create bucket",
      "examples": {
        "createBucket": "Create standard bucket `examplebucket' in chengdu"
      },
      "options": {
        "level": "Bucket type"
      },
      "logs": {
        "created": "Bucket `{{alias}}' created.",
        "hintConfig": "Use `./peg config add {{alias}}' to add bucket into config."
      },
      "errors": {
        "craete": "Bucket `{{alias}}' failed to create."
      }
    },
    "meta": {
      "description": "Set the control meta of files",
      "examples": {
        "metaSetSome": "Set meta and delete meta of files",
        "metaSetRecurse": "Set meta and delete meta of files recursively"
      },
      "options": {
        "meta": "Set the meta information of the file",
        "recursive": "Set meta for objects recursively"
      },
      "errors": {
        "headerInvalid": "`{{header}}' is invalid.",
        "checkFailed": "Files meta will NOT be set."

      },
      "logs": {
        "metaSetPre": "These files will be meta set!",
        "metaIndicator": "Metas are as follow: ",
        "metaSetQuestion": "Are you sure to set these meta? Enter `set' to confirm",
        "metaSet": "`Files meta set for `{{length}}' files in `{{path}}'",
        "metaSeting": "Setting header for `{{key}}'..."
      }
    },
    "mv": {
      "description": "Move objects",
      "examples": {
        "moveFile": "Move file",
        "moveFiles": "Move files from a to b"
      },
      "options": {
        "force": "Move file overwritely",
        "recursive": "Move objects recursively"
      }
    },
    "rb": {
      "description": "Remove bucket",
      "examples": {
        "deleteBucket": "Delete bucket `examplebucket' in chengdu"
      },
      "logs": {
        "deleteConfirm": "Are you sure to delete bucket `{{alias}}'? Enter `{{alias}}' to confirm",
        "deleted": "Bucket `{{alias}}' deleted.",
        "hintConfig": "Use `./peg config delete {{alias}}' to delete bucket in config."
      },
      "errors": {
        "checkFailed": "Bucket `{{alias}}' will NOT be delete.",
        "deleteFailedOrNotExist": "Bucket `{{alias}}' failed to delete or not exist in endpoint."
      }
    },
    "rm": {
      "description": "Remove objects",
      "examples": {
        "deleteAllFile": "Remove all files in test/ of bucket `example'"
      },
      "options": {
        "recursive": "Delete object recursively"
      },
      "logs": {
        "deletePre": "These files will be deleted!",
        "deleteConfirm": "Are you sure to delete them? Enter `delete' to confirm",
        "deleted": "Files deleted."
      },
      "errors": {
        "refersToDir": "`{{location}}' refers to a directory, `-r' to remove it.",
        "checkFailed": "Files will NOT be delete."
      }
    },
    "signurl": {
      "description": "(CHARGED FLOW) Query sign url for 10s",
      "examples": {
        "signurl": "sign url for `example.file' in test/ of bucket `example'"
      },
      "errors": {
      }
    },
    "synccheck": {
      "description": "Check the unsync cache of CDN",
      "examples": {
        "checkFiles": "Check files"
      },
      "options": {
        "recursive": "Check sync of objects recursively",
        "url": "Print url only of files needed update cache"
      },
      "logs": {
        "noUnsynced": "No file unsync cached in `{{path}}'.",
        "hasUnsynced": "These files unsync cached in `{{path}}'."
      }

    }
  },
  "utils": {
    "chart": {
      "total": "Total Objects: "
    },
    "config": {
      "initFailed": "Config init failed with {{path}}"
    },
    "bucket": {
      "notExist": "Bucket `{{bucketAlias}}' doesn't exist."
    },
    "url": {
      "invalid": "Bucket `{{bucket}}' or path `{{path}}' is invalid."
    }
  },
  "charts": {
    "bucket": {
      "name": "Name",
      "alias": "Alias",
      "region": "Region",
      "endpoint": "Endpoint"
    },
    "file": {
      "key": "Key", 
      "type": "Type", 
      "lastModified": "Last Modified", 
      "size": "Size",
      "lastCached": "Last Chached"
    },
    "meta": {
      "meta": "Meta", 
      "change": "Change"
    }
  },
  "cliche": {
    "configPathIndicator": "Configuration file path: {{configPath}}",
    "basicConfigTitle": "Basic Configuration Information: ",         
    "notInEndpoint": "Bucket `{{alias}}' failed to add as it isn't exist in such endpoint.",
    "chartBucketTitle": "Buckets: ",
    "chargeTip": "This url is charged for CNY0.5/GB/DAY",
    "options": {
      "exclude": "Exclude files that meet the specified criteria",
      "include": "List files that meet the specified criteria",
      "region": "Region"
    },
    "bars": {
      "copy": "Copying files",
      "download": "Downloading files",
      "upload": "Uploading files",
      "move": "Moving files"
    },
    "recurse": {
      "walking": "Walking `{{key}}'",
      "hashing": "Hashing `{{key}}'",
      "syncTimeGetting": "Getting Sync Time of `{{key}}'"

    },
    "errors": {
      "argsInvalid": "Arg(s) `{{paths}}' are invalid.",
      "pathInvalid": "`{{path}}' is invalid.",
      "refersToDir": "`{{location}}' refers to a directory rather than a file.",
      "noFileFound": "No file found in `{{path}}'."
    }
  },
  "options": {
    "configPath": "config file path(default is $HOME/.peg.config.yaml)",
    "secretId": "config secretId",
    "secretKey": "config secretKey"
  }
}